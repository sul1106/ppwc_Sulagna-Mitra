Find and explain the output of the following code snippet:
 #include<stdio.h>
 int main(){
 float x = 25.0, y=10.0;
 if(y != (x- 10.0))
 x = x- 10.0;
 else
 x = x / 2.0;
 return 0;
 }
 
Explanation:
Here, x is initialized to 25.0 and y to 10.0.
The expression (x - 10.0) equals 15.0, which is not equal to y (which is 10.0). Therefore, the if condition y != (x - 10.0) is true.
As a result, x is set to x - 10.0, which means x = 25.0 - 10.0 = 15.0.
Output: 
The program has no printf statements, so it does not produce any Output

#include<stdio.h>
 int main(){
 float x = 25.0, y=10.0;
 if(y < 15.0)
 if(y >= 0.0)
 x = 5 * y;
 else
 x = 2 * y;
 else
 x = 3 * y;
 return 0;
 }

Explanation:
The outer if checks y < 15.0, which is true since y is 10.0.
Then, it checks y >= 0.0, which is also true, so x is set to 5 * y, making x = 5 * 10.0 = 50.0.
Output:
There is no output, as the program contains no printf statements.

#include <stdio.h>
int main() {
    int i = 0;
    while (i <= 5) {
        printf("%3d %3d\n", i, 10 - i);
        i = i + 1;
    }
    return 0;
}

Explanation: 
The loop prints the values of i and 10 - i for each iteration from i = 0 to i = 5.
Output:
  0  10
  1   9
  2   8
  3   7
  4   6
  5   5

#include <stdio.h>
int main() {
    int i = 1;
    while (1) {
        printf("%d ", i++);
        if (i > 10)
            break;
    }
    return 0;
}

Explanation: 
The loop prints the value of i, increments it by 1 each time, and breaks once i > 10.
Output:
1 2 3 4 5 6 7 8 9 10

#include <stdio.h>
int main() {
    int i, j, n = 5;
    for (i = 1, j = 1; j <= n; i += 2, j++) {
        printf("%d%d\n", i, j);
    }
    return 0;
}

Explanation: 
The loop increments i by 2 and j by 1 each iteration until j > n. It prints i and j values.
Output:
11
31
51
71
91

#include <stdio.h>
int main() {
    int count = 11;
    while (--count + 1);
    printf("count down is %d \n", count);
    return 0;
}
Explanation: 
The loop condition --count + 1 keeps decreasing count until count becomes 0.
Output:
count down is 0

#include <stdio.h>
int main() {
    int m, n;
    for (m = 9; m > 0; --m)
        for (n = 6; n > 1; --n)
            printf("#########\n");
    return 0;
}

Explanation: 
The outer loop runs from m = 9 to m = 1, and for each m, the inner loop runs from n = 6 to n = 2, printing "#########" five times for each m.
Output: 
The string "#########" is printed 9 * 5 = 45 times.

#include <stdio.h>
int main() {
    int i = 2;
    switch (i) {
        default: printf("Hello ");
        case 1: printf("Hello ");
        case 2:
        case 3: printf("Hello ");
    }
    return 0;
}

Explanation: 
Since i = 2, the execution starts at case 2 and falls through, printing "Hello" twice.
Output:
Hello Hello

#include <stdio.h>
int main() {
    int i = 0;
    while (i++) {
        printf("%d ", i);
        if (i > 2)
            break;
    }
    return 0;
}

Explanation: 
Since i++ is post-incremented in the while loop condition, the condition is initially false (i = 0). So the loop doesn’t execute.
Output: 
No output is produced.

#include <stdio.h>
int main() {
    int a = 10;
    if (a = 0) {
        printf("%d %d", sizeof(2.3f), sizeof(2.3));
    }
    return 0;
}

Explanation: 
The if condition if (a = 0) assigns 0 to a, which is false. The code inside the if block doesn’t execute.
Output: 
No output is produced.






